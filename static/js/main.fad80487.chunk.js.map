{"version":3,"sources":["Components/Search.js","Components/ArticleContainer.js","App.js","serviceWorker.js","index.js"],"names":["Search","props","className","placeholder","value","input","onChange","updateInput","onSearch","handleSubmit","style","width","Meta","Card","ArticleContainer","articles","map","article","key","uri","hoverable","cover","alt","src","multimedia","find","img","format","url","title","href","target","description","byline","App","useState","setInput","setArticles","filteredArticles","setFilteredArticles","useEffect","getArticles","fetch","then","r","json","results","e","preventDefault","searchTerms","toLowerCase","split","filter","section","some","searchTerm","includes","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"mMAmBeA,EAhBA,SAACC,GAGZ,OACI,yBAAKC,UAAU,cACX,kBAAC,IAAMF,OAAP,CACIG,YAAY,oBACZC,MAAOH,EAAMI,MACbC,SAAUL,EAAMM,YAChBC,SAAUP,EAAMQ,aAChBC,MAAO,CAAEC,MAAO,S,SCXxBC,EAASC,IAATD,KAqBOE,EAlBU,SAACb,GAEtB,OACI,yBAAKC,UAAU,sBACVD,EAAMc,SAASC,KAAI,SAAAC,GAAO,OACvB,kBAAC,IAAD,CACIC,IAAKD,EAAQE,IACbT,MAAO,CAACC,MAAO,KACfS,WAAS,EACTC,MAAO,yBAAKC,IAAI,QAAQC,IAAKN,EAAQO,WAAWC,MAAK,SAAAC,GAAG,MAAmB,eAAfA,EAAIC,UAAyBC,OAE7F,kBAAChB,EAAD,CAAMiB,MAAO,uBAAGC,KAAMb,EAAQW,IAAKG,OAAO,UAAUd,EAAQY,OAAYG,YAAaf,EAAQgB,e,OCsC9FC,MAjDf,WAAgB,IAAD,EAEaC,mBAAS,IAFtB,mBAEN9B,EAFM,KAEC+B,EAFD,OAGmBD,mBAAS,IAH5B,mBAGNpB,EAHM,KAGIsB,EAHJ,OAImCF,mBAAS,IAJ5C,mBAING,EAJM,KAIYC,EAJZ,KAMbC,qBAAU,WACRC,MACC,IAEH,IAAMA,EAAc,WAClBC,MAAM,mGACLC,MAAK,SAAAC,GAAC,OAAIA,EAAEC,UACZF,MAAK,SAAA5B,GACJsB,EAAYtB,EAAS+B,SACrBP,EAAoBxB,EAAS+B,aAyBjC,OACE,yBAAK5C,UAAU,OACb,8DACA,kBAAC,EAAD,CAAQG,MAAOA,EAAOE,YAxBN,SAACwC,GACjBX,EAASW,EAAEhB,OAAO3B,QAuB8BK,aApB/B,SAACL,EAAO2C,GAC3BA,EAAEC,iBACF,IAAIC,EAAc5C,EAAM6C,cAAcC,MAAM,KAE5CZ,EAAoBxB,EAASqC,QAAO,SAAAnC,GAClC,IAAIY,EAAQZ,EAAQY,MAAMqB,cACtBG,EAAUpC,EAAQoC,QAAQH,cAC1BjB,EAAShB,EAAQgB,OAAOiB,cAC5B,OAAOD,EAAYK,MAAK,SAAAC,GACtB,SAAI1B,EAAM2B,SAASD,IAAeF,EAAQG,SAASD,IAAetB,EAAOuB,SAASD,cAYpF,kBAAC,EAAD,CAAkBxC,SAAUuB,MCrCdmB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB1B,MAAK,SAAA2B,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.fad80487.chunk.js","sourcesContent":["import React from 'react';\nimport { Input } from 'antd';\n\nconst Search = (props) => {\n\n\n    return(\n        <div className=\"search-bar\">\n            <Input.Search\n                placeholder=\"input search text\"\n                value={props.input}\n                onChange={props.updateInput}\n                onSearch={props.handleSubmit}\n                style={{ width: 200 }}\n            />\n\t\t</div>\n    );\n};\n\nexport default Search;","import React from 'react';\nimport { Card } from 'antd';\nconst { Meta } = Card;\n\n\nconst ArticleContainer = (props) => {\n\n    return(\n        <div className=\"articles-container\">\n            {props.articles.map(article => (\n                <Card\n                    key={article.uri}\n                    style={{width: 250}}\n                    hoverable\n                    cover={<img alt=\"image\" src={article.multimedia.find(img => img.format === \"thumbLarge\").url} />}\n                >\n                <Meta title={<a href={article.url} target=\"_blank\">{article.title}</a>} description={article.byline} />\n                </Card>\n            ))}\n        </div>\n    );\n}\n\nexport default ArticleContainer;","import React, {useState, useEffect} from 'react';\nimport Search from './Components/Search.js';\nimport ArticleContainer from './Components/ArticleContainer.js';\nimport './App.css';\n\nfunction App() {\n\n  const [input, setInput] = useState('');\n  const [articles, setArticles] = useState([]);\n  const [filteredArticles, setFilteredArticles] = useState([]);\n\n  useEffect(() => {\n    getArticles();\n  }, []);\n  \n  const getArticles = () => {\n    fetch(\"https://api.nytimes.com/svc/topstories/v2/science.json?api-key=Gwxln5M3geWlhR6UE0TY1FUWKSG3wCil\")\n    .then(r => r.json())\n    .then(articles => {\n      setArticles(articles.results);\n      setFilteredArticles(articles.results);\n    })\n  }\n  \n  const updateInput = (e) => {\n      setInput(e.target.value)\n  };\n\n  const handleSubmit = (value, e) => {\n    e.preventDefault()\n    let searchTerms = input.toLowerCase().split(\" \")\n\n    setFilteredArticles(articles.filter(article => {\n      let title = article.title.toLowerCase()\n      let section = article.section.toLowerCase()\n      let byline = article.byline.toLowerCase()\n      return searchTerms.some(searchTerm => {\n        if (title.includes(searchTerm) || section.includes(searchTerm) || byline.includes(searchTerm)) {\n          return true;\n        }\n        return false;\n      })\n    }))\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>New York Times Science Section</h1>\n      <Search input={input} updateInput={updateInput} handleSubmit={handleSubmit}/>\n      <ArticleContainer articles={filteredArticles}/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}